{"version":3,"file":"index.js","sources":["../node_modules/.pnpm/koa-compose@4.1.0/node_modules/koa-compose/index.js","../src/index.ts"],"sourcesContent":["'use strict'\n\n/**\n * Expose compositor.\n */\n\nmodule.exports = compose\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose (middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n","import compose from \"koa-compose\";\n\nexport type PrimitiveType = string | number | boolean | null | undefined;\n\nexport type SerializableData =\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | SerializableData[]\n  | { [name: string]: SerializableData };\n\nexport type ReqOptions = {\n  method?: Method | MethodLowercase;\n  base?: string;\n  headers?: Headers | Record<string, string>;\n  query?:\n    | URLSearchParams\n    | string\n    | Record<string, PrimitiveType>\n    | [string, PrimitiveType][];\n  params?: Record<string, string | number | boolean>;\n  body?: ReqBody | SerializableData;\n  use?: Middleware[];\n  [index: string]: unknown;\n};\n\nexport type Method =\n  | \"GET\"\n  | \"POST\"\n  | \"PUT\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"PURGE\";\nexport type MethodLowercase =\n  | \"get\"\n  | \"post\"\n  | \"put\"\n  | \"delete\"\n  | \"patch\"\n  | \"head\"\n  | \"purge\";\nexport type ReqBody =\n  | string\n  | FormData\n  | URLSearchParams\n  | Blob\n  | BufferSource\n  | ReadableStream;\n\nexport type MiddlewareCtx = {\n  url: URL;\n\n  options: {\n    method: Method;\n    headers: Headers;\n    body: ReqBody;\n  };\n\n  response?: Response;\n  [name: string]: unknown;\n};\n\nexport type Middleware = (\n  ctx: MiddlewareCtx,\n  next: () => Promise<any> // eslint-disable-line @typescript-eslint/no-explicit-any\n) => unknown;\nexport type Query =\n  | string\n  | Record<string, PrimitiveType>\n  | [string, PrimitiveType][];\nexport type FormBody =\n  | Record<string, PrimitiveType | Blob>\n  | [string, PrimitiveType | Blob, string?][];\n\nfunction createURLSearchParams(query: Query) {\n  if (query.constructor === String) {\n    return new URLSearchParams(query);\n  }\n\n  if (query.constructor === Object) {\n    query = Object.entries(query);\n  }\n\n  const q = new URLSearchParams();\n\n  for (const [name, value] of query as [string, PrimitiveType][]) {\n    if (value !== null && value !== undefined) {\n      q.append(name, value as string);\n    }\n  }\n\n  return q;\n}\n\nfunction createFormData(data: FormBody) {\n  if (data.constructor === Object) {\n    data = Object.entries(data);\n  }\n\n  const f = new FormData();\n\n  for (const [name, value, filename] of data as [\n    string,\n    PrimitiveType | Blob,\n    string?\n  ][]) {\n    if (value !== null && value !== undefined) {\n      if (filename) {\n        f.append(name, value as Blob, filename);\n      } else {\n        f.append(name, value as string);\n      }\n    }\n  }\n\n  return f;\n}\n\nclass Teleman {\n  base?: string;\n  headers: Headers;\n  middleware: Middleware[] = [];\n\n  constructor({\n    base,\n    headers,\n  }: {\n    base?: string;\n    headers?: Headers | Record<string, string>;\n  } = {}) {\n    if (base) {\n      this.base = base;\n    } else {\n      try {\n        // defaults to document.baseURI in browser\n        this.base = document.baseURI;\n      } catch (e) {\n        // in node.js, ignore\n      }\n    }\n\n    this.headers = new Headers(headers);\n  }\n\n  use(middleware: Middleware) {\n    this.middleware.push(middleware);\n    return this;\n  }\n\n  async fetch<T>(\n    path: string,\n    {\n      method = \"GET\",\n      base = this.base,\n      headers,\n      query,\n      params = {},\n      body,\n      use = this.middleware,\n      ...rest\n    }: ReqOptions = {}\n  ): Promise<T> {\n    method = method.toUpperCase() as Method;\n    const url = new URL(\n      path.replace(/:([a-z]\\w*)/gi, (_, w) => encodeURIComponent(params[w])),\n      base\n    );\n\n    if (query) {\n      if (!(query instanceof URLSearchParams)) {\n        query = createURLSearchParams(query);\n      }\n\n      query.forEach((value, name) => url.searchParams.append(name, value));\n    }\n\n    if (this.headers && headers) {\n      const h = new Headers(this.headers);\n      new Headers(headers).forEach((value, name) => h.set(name, value));\n      headers = h;\n    } else {\n      headers = new Headers(this.headers || headers);\n    }\n\n    if (\n      body !== undefined &&\n      body !== null &&\n      ![\"GET\", \"HEAD\"].includes(method)\n    ) {\n      const contentType = headers.get(\"content-type\") || \"\";\n\n      if (\n        (!contentType && body && body.constructor === Object) ||\n        contentType.startsWith(\"application/json\")\n      ) {\n        if (!headers.has(\"content-type\")) {\n          headers.set(\"content-type\", \"application/json\");\n        }\n\n        body = JSON.stringify(body);\n      } else if (\n        contentType.startsWith(\"multipart/form-data\") &&\n        body &&\n        !(body instanceof FormData)\n      ) {\n        body = createFormData(body as FormBody);\n      } else if (\n        contentType.startsWith(\"application/x-www-form-urlencoded\") &&\n        body &&\n        !(body instanceof URLSearchParams)\n      ) {\n        body = createURLSearchParams(body as Query);\n      }\n    }\n\n    const ctx: MiddlewareCtx = {\n      url,\n\n      options: {\n        method,\n        headers,\n        body: body as ReqBody,\n      },\n\n      ...rest,\n    };\n\n    return <Promise<T>>compose(use)(ctx, () =>\n      fetch(ctx.url.href, ctx.options).then((response) => {\n        ctx.response = response;\n        let body: Promise<unknown> = Promise.resolve(response);\n\n        if (![\"HEAD\", \"head\"].includes(ctx.options.method)) {\n          const responseType = response.headers.get(\"content-type\");\n\n          if (responseType) {\n            if (responseType.startsWith(\"application/json\")) {\n              body = response.json();\n            } else if (responseType.startsWith(\"text/\")) {\n              body = response.text();\n            }\n          }\n        }\n\n        if (response.ok) {\n          return body;\n        } else {\n          return body.then((e) => {\n            throw e;\n          });\n        }\n      })\n    );\n  }\n\n  get<T>(path: string, query?: Query, options?: ReqOptions) {\n    return this.fetch<T>(path, {\n      ...options,\n      method: \"GET\",\n      query,\n    });\n  }\n\n  post<T>(\n    path: string,\n    body?: ReqBody | SerializableData,\n    options?: ReqOptions\n  ) {\n    return this.fetch<T>(path, {\n      ...options,\n      method: \"POST\",\n      body,\n    });\n  }\n\n  put<T>(\n    path: string,\n    body?: ReqBody | SerializableData,\n    options?: ReqOptions\n  ) {\n    return this.fetch<T>(path, {\n      ...options,\n      method: \"PUT\",\n      body,\n    });\n  }\n\n  patch<T>(\n    path: string,\n    body?: ReqBody | SerializableData,\n    options?: ReqOptions\n  ) {\n    return this.fetch<T>(path, {\n      ...options,\n      method: \"PATCH\",\n      body,\n    });\n  }\n\n  delete<T>(path: string, query?: Query, options?: ReqOptions) {\n    return this.fetch<T>(path, {\n      ...options,\n      method: \"DELETE\",\n      query,\n    });\n  }\n\n  head<T>(path: string, query?: Query, options?: ReqOptions) {\n    return this.fetch<T>(path, {\n      ...options,\n      method: \"HEAD\",\n      query,\n    });\n  }\n\n  purge<T>(path: string, query?: Query, options?: ReqOptions) {\n    return this.fetch<T>(path, {\n      ...options,\n      method: \"PURGE\",\n      query,\n    });\n  }\n}\n\nexport default Teleman;\nexport { Teleman };\nexport const teleman = new Teleman();\n"],"names":["compose"],"mappings":"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","x_google_ignoreList":[0]}